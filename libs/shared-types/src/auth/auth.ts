// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: src/auth/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
  passwordRepeat: string;
  userAgent: string;
  userIp: string;
}

export interface RefreshToken {
  token: string;
  exp: string;
  userId: string;
  userAgent: string;
  userIp: string;
}

export interface LoginRequest {
  email: string;
  password: string;
  userAgent: string;
  userIp: string;
}

export interface AuthResponse {
  accessToken: string;
  refreshToken: RefreshToken | undefined;
}

export interface RefreshRequest {
  refreshToken: string;
  userAgent: string;
  userIp: string;
}

export interface User {
  id: string;
  username: string;
  email: string;
  img: string;
}

export interface GetUserByIdRequest {
  id: string;
}

export interface LogoutRequest {
  refreshToken: string;
}

export interface ChangeUserRequest {
  id: string;
  username: string;
  img: string;
}

export interface Empty {
}

export interface AuthServiceClient {
  register(request: RegisterRequest): Observable<AuthResponse>;

  login(request: LoginRequest): Observable<AuthResponse>;

  refreshTokens(request: RefreshRequest): Observable<AuthResponse>;

  getUserById(request: GetUserByIdRequest): Observable<User>;

  changeUser(request: ChangeUserRequest): Observable<User>;

  logout(request: LogoutRequest): Observable<Empty>;
}

export interface AuthServiceController {
  register(request: RegisterRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  login(request: LoginRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  refreshTokens(request: RefreshRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  getUserById(request: GetUserByIdRequest): Promise<User> | Observable<User> | User;

  changeUser(request: ChangeUserRequest): Promise<User> | Observable<User> | User;

  logout(request: LogoutRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "refreshTokens", "getUserById", "changeUser", "logout"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
